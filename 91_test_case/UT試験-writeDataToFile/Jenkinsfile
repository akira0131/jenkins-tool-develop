#!groovy

@Library('jenkins-common-lib') _

node('master') { timestamps
{
    stage('前提条件')
    {
        // 書込対象のファイル
        temp = ['path':'/opt/var/jenkins/temp', 'file':'result_test-case-1.yml']
        // ファイルが存在していた場合、削除
        File f = new File(temp['path'] + "/" + temp['file'])
        if(f.exists())
        {
            f.delete()
        }
        // 書込対象のファイル
        temp = ['path':'/opt/var/jenkins/temp', 'file':'result_test-case-2.yml']
        // ファイルが存在していた場合、削除
        File ff = new File(temp['path'] + "/" + temp['file'])
        if(ff.exists())
        {
            ff.delete()
        }
    }
    stage('test-case-1')
    {
        printMsg('info', '期待する動作：引数で渡した変数がファイルの書き出しに成功すること。')
        try
        {
            result = ['webap': 'faital']
            writeDataToFile(result, 'test-case-1')
        }
        catch(Exception e) {
            println 'result: NG'
            throw e
        }
        println 'result: OK'
    }
    stage('test-case-2')
    {
        printMsg('info', '試験条件：キーが変数でマップされた変数を引数で渡す。')
        printMsg('info', '期待する動作：引数で渡した変数がファイルの書き出しに成功すること。')
        try
        {
            server = 'batch'
            result = ["${server}": 'warning']
            writeDataToFile(result, 'test-case-2')
        }
        catch(Exception e) {
            println 'result: NG'
            throw e
        }
        println 'result: OK'
    }
    stage('test-case-3')
    {
        printMsg('info', '期待する動作：既に存在しているファイルは削除され、新たに引数に渡した変数でファイルの書き出しに成功すること。')
        try
        {
            server = 'batch'
            result = ["${server}": 'nomal']
            writeDataToFile(result, 'test-case-2')
        }
        catch(Exception e) {
            println 'result: NG'
            throw e
        }
        println 'result: OK'
    }
    stage('test-case-4')
    {
        printMsg('info', '試験条件：改行を含んでいる変数を引数で渡す。')
        printMsg('info', '期待する動作：引数で渡した変数がファイルの書き出しに成功すること。')
        try
        {
            result = ['stodout': 'nomal\nwarning']
            writeDataToFile(result, 'test-case-4')
        }
        catch(Exception e) {
            println 'result: NG'
            throw e
        }
        println 'result: OK'
    }
    stage('test-case-5')
    {
        printMsg('info', '試験条件：複数マップされた変数を引数で渡す。')
        printMsg('info', '期待する動作：引数で渡した変数がファイルの書き出しに成功すること。')
        try
        {
            result = ['stdout': 'nomal\nwarning']
            result.put('stderror', 'aiueo\nkakikukeko\nsasisuseso\ntatituteto\nnaninuneno')
            result.put('wu_execute','''groovy-ssh-2.9.0.jar
jna-4.1.0.jar
jna-platform-4.1.0.jar
jsch-0.1.53.jar
jsch.agentproxy.connector-factory-0.0.9.jar
jsch.agentproxy.core-0.0.9.jar
jsch.agentproxy.jsch-0.0.9.jar
jsch.agentproxy.pageant-0.0.9.jar
jsch.agentproxy.sshagent-0.0.9.jar
jsch.agentproxy.usocket-jna-0.0.9.jar
jsch.agentproxy.usocket-nc-0.0.9.jar
slf4j-api-1.7.7.jar
slf4j-log4j12-1.7.7.jar
slf4j-simple-1.7.7.jar''')
            writeDataToFile(result, 'test-case-4')
        }
        catch(Exception e) {
            println 'result: NG'
            throw e
        }
        println 'result: OK'
    }
}}
